/**
 * path-utils
 * Copyright (c) 2014 Jon Schlinkert, Brian Woodward, contributors.
 * Licensed under the MIT license.
 */

'use strict';

// Node.js
var deprecate = require('util').deprecate;
var fs        = require('graceful-fs');
var path      = require('path');

// node_modules
var _ = require('lodash');



// Export the `_path` object
var _path = module.exports = {};


/**
 * Utils
 */

_path.arrayify = function(val) {
  return !Array.isArray(val) ? [val] : val;
};

_path.escapeRegex = function(re) {
  return re.replace(/(.)/g, '\\$1');
};

// Normalize paths to use `/`
_path.pathSepRegex = /[\/\\]/g;
_path.normalizeSlash = function(str) {
  return str.replace(_path.pathSepRegex, '/');
};



/**
 * CWD
 */

// Normalized path to the CWD
// @example: _path.cwd('foo')
_path.cwd = function() {
  var filepath = path.join.apply(path, arguments);
  return _path.normalizeSlash(path.join(process.cwd(), filepath));
};

// Change the current working directory (CWD)
_path.setCWD = function() {
  var filepath = path.join.apply(path, arguments);
  process.chdir(filepath);
};



/**
 * Directory / Segments
 */

// The last segment of a filepath
_path.lastSegment = function() {
  var filepath = path.join.apply(path, arguments);
  return _.compact(filepath.split(path.sep)).pop();
};

// The last segment of a filepath
_path.firstSegment = function() {
  var filepath = path.join.apply(path, arguments);
  return _.compact(filepath.split(path.sep)).slice(0, 1)[0];
};
_path.firstDir = _path.firstSegment;

// Directory path
_path.dirname = function() {
  var filepath = path.join.apply(path, arguments).split(path.sep);
  var dirlen = filepath.length - 1;
  var dir = _path.normalizeSlash(filepath.splice(0, dirlen).join(path.sep));
  return _path.addTrailingSlash(dir);
};

// Directory path
_path.dir = function() {
  var filepath = path.join.apply(path, arguments);
  if(_path.endsWith(filepath, path.extname(filepath))) {
    filepath = _path.removeFilename(filepath);
    return filepath;
  }
  return filepath;
};



/**
 * Path "endings"
 */

// Last dictory path segment, excluding the filename
_path.lastDir = function() {
  var filepath = path.join.apply(path, arguments);
  if(_path.hasExt(_path.lastSegment(filepath))) {
    filepath = _path.removeFilename(filepath);
  }
  var segments = _path.dir(filepath).split(path.sep);
  // return _.compact(segments).splice(-1,1)[0];
  return _.compact(segments).pop();
};

// The last character in a filepath. 'foo/bar/baz/' => '/'
_path.lastChar = function(filepath) {
  return _.toArray(filepath).pop();
};

// Returns true if the filepath ends with the suffix
_path.endsWith = function(filepath, suffix) {
  filepath = path.normalize(filepath);
  suffix = path.normalize(suffix);
  return filepath.indexOf(suffix, filepath.length - suffix.length) !== -1;
};



/**
 * Trailing slash
 */

// Remove the trailing slash from a file path
_path.removeTrailingSlash = function () {
  var filepath = path.join.apply(path, arguments);
  var sep = new RegExp(_path.escapeRegex(path.sep) + '+$');
  return filepath.replace(sep, '');
};

// Add a trailing slash to the filepath, does NOT consult
// the file system to check if it's a file or a directory.
_path.addTrailingSlash = function () {
  var filepath = path.join.apply(path, arguments);
  if (filepath.charAt(filepath.length - 1) !== path.sep) {
    if(!_path.hasExt(filepath)) {
      filepath += path.sep;
    }
  }
  return filepath;
};



/**
 * File name
 */

// Returns a filename
_path.filename = function() {
  var filepath = path.join.apply(path, arguments);
  var re = /[\w.-]+$/;
  try {
    var foo = re.exec(filepath)[0];
    return foo;
  } catch(e) {
    return '';
  }
};

_path.getFilename = function() {
  var filepath = path.join.apply(path, arguments);
  return filepath.split(path.sep).pop().split('/').pop();
};

// Strip the filename from a file path
_path.removeFilename = function() {
  var filepath = path.join.apply(path, arguments);
  if(_path.hasExt(_path.lastSegment(filepath))) {
    filepath = filepath.replace(/[^\/|\\]*$/, '');
  }
  return filepath;
};



/**
 * Basename
 */

// Filename without extension
_path.basename = function() {
  var filepath = path.join.apply(path, arguments);
  return path.basename(filepath, path.extname(filepath));
};

// Filename without extension. Differs slightly from basename
_path.base = function() {
  var filepath = path.join.apply(path, arguments);
  var name = path.basename(filepath, path.extname(filepath));
  return name.split('.')[0];
};
// Alias
_path.name = _path.base;



/**
 * Extension
 */

// File extension without the dot
_path.ext = function() {
  var filepath = path.join.apply(path, arguments);
  return path.extname(filepath).replace(/\./, '');
};

// Get the _last_ file extension.
// @example 'foo/bar/file.tmpl.md' => 'md'
_path.lastExt = function() {
  var filepath = path.join.apply(path, arguments);
  var sep = _path.escapeRegex(path.sep);
  var ext = new RegExp('^.*?\\.([^.|' + sep + ']*)$', 'g');
  var segments = ext.exec(filepath);
  return segments && segments[1].length > 0 ? segments[1] : '';
};

// Returns true if the filepath ends in a file with an extension
_path.hasExt = function() {
  var filepath = path.join.apply(path, arguments);
  var last = _path.lastSegment(filepath);
  return /\./.test(last);
};

// Returns true if the filepath has one of the given extensions
_path.containsExt = function(filepath, ext) {
  ext = _path.arrayify(ext);
  if(ext.length > 1) {
    ext = '?:' + ext.join('|');
  } else {
    ext = ext.join('');
  }
  return new RegExp('\\.('+ext+')$').test(filepath);
};

// Return a list of files with the given extension.
_path.withExt = function (filepath, ext) {
  var files = fs.readdirSync(filepath);
  var list = [];
  files.forEach(function (filename) {
    if (_path.containsExt(filename, ext)) {
      list.push(filename);
    }
  });
  return list;
};



/**
 * Boolean checks
 */

/**
 * The following functions are sourced from grunt.file
 * - isPathAbsolute
 * - arePathsEquivalent
 * - doesPathContain
 * - isPathCwd
 * - isPathInCwd
 * https://github.com/gruntjs/grunt/blob/master/lib/grunt/file.js
 * https://github.com/gruntjs/grunt/blob/master/LICENSE-MIT
 */

// True if the path is absolute
_path.isPathAbsolute = function () {
  filepath = path.join.apply(path, arguments);
  return path.resolve(filepath) === _path.removeTrailingSlash(filepath);
};

// True if the specified paths refer to the same path.
_path.arePathsEquivalent = function(first) {
  first = path.resolve(first);
  for (var i = 1; i < arguments.length; i++) {
    if (first !== path.resolve(arguments[i])) { return false; }
  }
  return true;
};

// True if descendant path(s) contained within ancestor path.
// Note: does not test if paths actually exist.
_path.doesPathContain = function(ancestor) {
  ancestor = path.resolve(ancestor);
  var relative;
  for (var i = 1; i < arguments.length; i++) {
    relative = path.relative(path.resolve(arguments[i]), ancestor);
    if (relative === '' || /\w+/.test(relative)) { return false; }
  }
  return true;
};

// True if a filepath is the CWD.
_path.isPathCwd = function() {
  var filepath = path.join.apply(path, arguments);
  try {
    return _path.arePathsEquivalent(process.cwd(), fs.realpathSync(filepath));
  } catch(e) {
    return false;
  }
};

// True if a filepath is contained within the CWD.
_path.isPathInCwd = function() {
  var filepath = path.join.apply(path, arguments);
  try {
    return _path.doesPathContain(process.cwd(), fs.realpathSync(filepath));
  } catch(e) {
    return false;
  }
};


// deprecate all the functions and direct people to use fs-utils
_.forOwn(_path, function (fn, key) {
  if (!_.isFunction(fn)) return;
  var msg = _.template("<%= key %> has been deprecated and moved to fs-utils.", { key: key });
  _path[key] = deprecate(fn, msg);
});